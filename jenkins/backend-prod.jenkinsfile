pipeline {
    agent {
        label 'Backend'
    }
    
    stages {
        stage('Github') {
            steps {
                git branch: 'main', url: 'https://github.com/woowacourse-teams/2022-dallog.git'
                withCredentials([GitUsernamePassword(credentialsId: 'github-access-token', gitToolName: 'Default')]) {
                    sh 'git submodule update --init --recursive'
                }
            }
        }
        stage('Build') {
            steps {
                dir('backend') {
                    sh "./gradlew bootJar"
                }
            }
        }
        stage('Deploy') {
            steps {
                dir('backend/build/libs') {
                    sshagent(credentials: ['key-dallog']) {
                        sh '''#!/bin/bash
                        if curl -s "http://${BACKEND_PROD_PUBLIC_IP}:${BLUE_PORT}" > /dev/null
                        then
                            target_port=$GREEN_PORT
                        else
                            target_port=$BLUE_PORT
                        fi

                        scp -o StrictHostKeyChecking=no backend-0.0.1-SNAPSHOT.jar ubuntu@${BACKEND_PROD_IP}:/home/ubuntu
                        ssh ubuntu@${BACKEND_PROD_IP} "sh run.sh ${target_port}" &

                        for retry_count in \$(seq 10)
                        do
                            if curl -s "http://${BACKEND_PROD_PUBLIC_IP}:${target_port}" > /dev/null
                            then
                                echo "Health check success ✅ port number: ${target_port}"
                                break
                            fi

                            if [ $retry_count -eq 10 ]
                            then
                                echo "Health check failed ❌ port number: ${target_port}"
                                exit 1
                            fi

                            echo "The server is not alive yet. Retry health check in 20 seconds... retry count: ${retry_count}"
                            sleep 20
                        done

                        ssh -o StrictHostKeyChecking=no ubuntu@${BACKEND_WS_IP} "echo 'set \\\$service_port ${target_port};' | sudo tee /etc/nginx/conf.d/service-port.inc && sudo service nginx reload"
                        echo "Switch the reverse proxy direction of nginx to ${target_port} 🔄"

                        if [ "${target_port}" == "${BLUE_PORT}" ]
                        then
                            ssh ubuntu@${BACKEND_DEV_IP} "sh ./kill-process.sh ${GREEN_PORT}"
                        else
                            ssh ubuntu@${BACKEND_DEV_IP} "sh ./kill-process.sh ${BLUE_PORT}"
                        fi

                        echo "Kill the process on the opposite server. 🔪"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            discordSend title: "백엔드 프로덕션 서버 배포에 성공하였습니다 ✨",
                description: "빌드 번호 #${env.BUILD_NUMBER}",
                link: "http://jenkins.dallog.me:8080/job/${env.JOB_NAME}/${env.BUILD_NUMBER}",
                result: currentBuild.currentResult, 
                webhookURL: env.DISCORD_BACKEND_PROD_WEBHOOK,
                footer: "http://jenkins.dallog.me:8080/job/${env.JOB_NAME}/${env.BUILD_NUMBER}"
        }
        failure {
            discordSend title: "백엔드 프로덕션 서버 배포에 실패하였습니다 ❌",
                description: "빌드 번호 #${env.BUILD_NUMBER}",
                link: "http://jenkins.dallog.me:8080/job/${env.JOB_NAME}/${env.BUILD_NUMBER}",
                result: currentBuild.currentResult, 
                webhookURL: env.DISCORD_BACKEND_PROD_WEBHOOK,
                footer: "http://jenkins.dallog.me:8080/job/${env.JOB_NAME}/${env.BUILD_NUMBER}"
        }
    }
}
